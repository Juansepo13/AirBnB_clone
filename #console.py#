#!/usr/bin/env python3
"""
Console for object management and storage persistant
"""
import models
from models.base_model import BaseModel
from models.user import User
from models.state import State
from models.city import City
from models.amenity import Amenity
from models.place import Place
from models.review import Review
from models.engine.file_storage import FileStorage
import os
import sys
import json
import cmd
import shlex
""" 6. Console 0.0.1 """

my_classes = {"BaseModel": BaseModel, "User": User, "State": State,
              "City": City, "Amenity": Amenity,
              "Place": Place, "Review": Review}


class HBNBCommand(cmd.Cmd):
    """-HBNBCommand(cmd.Cmd) is a class that inherits from cmd.Cmd
                    cmd.Cmd is methods to execute a command prompt command
                    line interface for a Python program.
       -prompt is a interpreter-specific string that is displayed to the user
       when they are ready to enter a command.
       -classes is a list of all the classes that inherit from BaseModel.
       -my_objects is a dictionary of all the instances of the classes
       in classes.
       -my_classes oa diccionary whit the classes.
       -storage is an instance of FileStorage.
       -self is an instance of HBNBCommand to use the methods of the class.
       -args is a list of arguments passed to the command.
       -args_list is a list of arguments passed to the command."""

    prompt = '(hbnb) '
    classes = ["BaseModel",
               "User",
               "State",
               "City",
               "Amenity",
               "Place",
               "Review"]

    """reload() reloads the JSON file

    instances = ["do_show", "do_destroy", "do_all", "do_update"]"""

    def do_quit(self, args):
        """Quit command to exit the program.\n"""
        quit()

    def do_EOF(self, args):
        """End Of File command to exit the program"""
        quit()

def do_destroy(self, args):
            """Deletes an instance based on the class name and id."""
                    args_list = shlex.split(args)
                            """args_list is a list of arguments passed to the command
                shlex is a lexical analyser for simple shell-like syntax;
                and shlex.split() splits a string into a list of tokens."""
                                    if len(args_list) == 0:
                                                    print("** class name missing **")
                                                                return
                                    elif args_list[0] in my_classes:
                                                    """if the args_list[0] is in my_classes, then the class exists"""
                                                                if len(args_list) > 1:
                                                                                    """if the lenght of args_list is greater than 1,
                then the id is passed"""
                                                                                                    key = args_list[0] + "." + args_list[1]
                                                                                                                    """key = args_list[0] + "." + args_list[1]
                    key is the key to search in the dictionary"""
                                                                                                                                    if key in models.storage.all():
                                                                                                                                                            del models.storage.all()[key]
                                                                                                                                                                                """del(key) removes the key from the dictionary"""
                                                                                                                                                                                                    models.storage.save()
                                                                                                                                                                                                                        """save() saves the changes in the JSON file"""
                                                                                                                                    else:
                                                                                                                                                            print("** no instance found **")
else:
                    print("** instance id missing **")
else:
                print("** class doesn't exist **")

                    def do_all(self, args):
                                """Prints all string representation of all instances
        based or not on the class name."""

                                        new_object = models.storage.all()
                                                """new_object is a dictionary with all the objects"""
                                                        list_objects = []
                                                                """list_objects is a list with all the objects"""
                                                                        if args not in my_classes:
                                                                                        """if args is not empty and args is not in my_classes,
            then the class doesn't exist"""
                                                                                                    print("** class doesn't exist **")
                                                                                                                return
                                                                                                                    if args in self.classes:
                                                                                                                                    for key, value in new_object.items():
                                                                                                                                                        """for key, value in new_object.items()
                    key is the key of the dictionary
                    value is the value of the dictionary, new_object.items is a
                    generator that returns the key-value of the dictionary"""
                                                                                                                                                                        if args in key:
                                                                                                                                                                                                """if args is in key, then the class exists"""
                                                                                                                                                                                                                    toke_key = key.split(".")
                                                                                                                                                                                                                                        """toke_key is a list with the class name and the id"""
                                                                                                                                                                                                                                                            key_new = "[" + toke_key[0] + "]"\
                                                                                                                                                                                                                                                                                        + " (" + toke_key[1] + ")"
                                                                                                                                                                                                                                                                                list_objects.append(key_new + " " + str(value))
                                                                                                                                                                                                                                                                                                    """list_objects.append(key_new + " " + str(value))
                        list_objects is a list with the objects in format
                        [class name] (id) object"""
                                                                                                                                                                                                                                                                                                                        print(list_objects)